# what service should have - the deployment which it want to expose, the port of pod and  port at which
# application is running
# pl refer https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/

apiVersion: v1
# k8 artifacts
kind: Service
# its own name
metadata:
  name: backend
# deployment specs
spec:
  # select pods with lable app: second-app (pods may have multiple labels)
  # the pods in our case is having second label tier: backend
  # the pods can also be placed say with label tier: another-backend
  # so selecting just app: second-app is targetting all the tiers in which this app can be placed
  selector:
    app: second-app
  # ports specs
  ports:
  # IP protocol
  - protocol: "TCP"
    # port that will be exposed by this service
    port: 80
    # port number to access on the pods targeted by the service (mapped to application)
    targetPort: 5000
    # to allow traffic inside kinD cluster
    nodePort: 30008
  # type of service
  type: NodePort
---
# The deployment object first should have its own name , then the container and pod containing that container
# and then selecting this pod as a part of deployment

# refer https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/
# will list all details of enclosing specs
apiVersion: apps/v1
# Deployment is k8 artifact or k8 object
kind: Deployment
metadata:
  # name of deployment
  name: second-app-deployment
# deployment specs, how the deployment should be configured
spec:
  # how many pods, default is 1, even 0 can be given
  replicas: 1
  # pods specs, which deployment should have
  template:
    # pods should be labelled with
    # there is no need for kind: Pod  here as deployment will always have pod
    metadata:
      # pod should be labelled with
      labels:
        app: second-app
        tier: backend
    # how this pod should look like
    spec:
      # how containers should be created inside pods
      # for this deployment, how many replicas you create , all pods will have same container spec
      containers:
      # container name inside pod and image
      - name: second-app-container
        # you need to create this image and push to registry
        image: cbagade/pykube-data-icwithoutvol:v25
        ports:
          # container port (app will be exposed at 5000)
          - containerPort: 5000        
  # what pods should be created as a part of deployment
  # see template section, where pods are labelled
  # those pods will be selected to form this deployment
  selector:
    # the labels will be matched based on labels of pods
    matchLabels:
      app: second-app
      tier: backend


# docker build -t cbagade/pykube-data-icwithoutvol:v25 .
# docker push cbagade/pykube-data-icwithoutvol:v25
# kubectl apply -f app_deployment.yaml
# kubectl get pods -w  -- ensure pods in running state
# GET app_2/api/v1/fruits change port to 30008  -- should give error for file not exist
# POST  app_2/api/v1/fruits change port to 30008
# Verify the changes
# GET  app_2/api/v1/fruits change port to 30008
# GET  app_2/api/v1/fruits/error change port to 30008
# This action will put container in error state and restart (pod is not restarted)
# GET app_2/api/v1/fruits change port to 30008
# changes are lost, when container restart
# also pod restart won't have changes