apiVersion: apps/v1
kind: Deployment
metadata:
  name: dep-up-app
spec:
  replicas: 2
  # this will decide how deployments should be updated
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: dep-up-app
    spec:
      containers:
      - name: dep-up-app
        # image: cbagade/dep-up-app:v1
        image: cbagade/dep-up-app:v2
  selector:
    matchLabels:
      app: dep-up-app


# kubectl delete -f app_deployment.yaml
# Recreate strategy
# kubectl apply -f app_deployment.yaml
# check the rollout status of deployment
# kubectl rollout status deployment dep-up-app
# to check revision history
# kubectl rollout history deployment dep-up-app
# now change something in app, rebuild image to new version, change app_deployment and do 
# kubectl apply -f app_deployment.yaml
# kubectl get pods -w
# you can see all pods in terminating state and then coming up , also check following
# kubectl rollout status deployment dep-up-app
# see revisions
# kubectl rollout history deployment dep-up-app
# while rolling out kubernetes will create replicaset of all versions and have replicas of current version
# kubectl get rs

# also to see the scale down and scale up 
# kubectl describe deployment dep-up-app

# Rolling Update
# kubectl delete -f app_deployment.yaml
# comment recreate above and uncomment rollingupdate
# kubectl apply -f app_deployment.yaml
# kubectl rollout status deployment dep-up-app
# kubectl rollout history deployment dep-up-app
# change image version above 
# kubectl apply -f app_deployment.yaml
# kubectl get pods -w
# to see how updates are performed
# kubectl describe deployment dep-up-app

# To undo changes
# observe rs and notive the replicas numbers against each rs
# kubectl get rs
# kubectl rollout undo deployment dep-up-app
# now see again the rs again, this time previous version replicas would have been restored
# kubectl get rs


