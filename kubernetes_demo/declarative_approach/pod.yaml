# refer https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/
# will list all details of enclosing specs

apiVersion: v1
# Pod is k8 artifact or k8 object
kind: Pod
metadata:
  # name of pod
  name: second-app
  # labels on pod
  labels:
    app: second-app
    tier: front-end
spec:
  # container specification. Pod will have container inside
  containers:
    # name of container
  - name: second-app-container
    # image of container
    image: cbagade/pykubd-first-app:v5
    # Policy for pulling image 
    # Always pulled from image-registry
    # IfNotPresent - Only pulled when not present locally
    # Never - Get only locally (inside nodes) and if some issue with image, the container startup failed
    # Images inside Nodes are listed with crictl cli
    imagePullPolicy: Always
    ports:
      # container port (app will be exposed at 5000)
      - containerPort: 5000

# docker build -t cbagade/pykubd-first-app:v5 .
# docker push cbagade/pykubd-first-app:v5
# kubectl apply -f pod.yaml
# kubectl get pods -w
# wait for pod to be in running state
# kubectl exec -it second-app -- /bin/bash
# inside pod
# curl http://localhost:5000/greetings
# also outside pod, see labels by executing following command
# kubectl describe pod <pod_name>
# to see yaml definition of a pod
# kubectl get pod <pod_name> -o yaml
# to edit pod
# kubectl edit pod <pod_name>
# if definition got saved at /tmp location after edit
# kubectl replace --force -f </tmp/***.yaml>
# kubectl delete -f pod.yaml
